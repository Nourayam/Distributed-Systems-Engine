I'll create a clean, production-ready React frontend for the RAFT DSS simulator. Here are the key files:

# ==== FILE: frontend/src/App.js ====
import React, { useState, useEffect } from 'react';
import ClusterCanvas from './components/ClusterCanvas';
import LogViewer from './components/LogViewer';
import ControlPanel from './components/ControlPanel';
import StatusBar from './StatusBar';
import './App.css';

const App = () => {
  const [simulationState, setSimulationState] = useState(null);
  const [events, setEvents] = useState([]);
  const [isRunning, setIsRunning] = useState(false);

  // Mock data for development
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      setSimulationState({
        nodes: [
          { id: 0, role: 'LEADER', term: 3, status: 'healthy' },
          { id: 1, role: 'FOLLOWER', term: 3, status: 'healthy' },
          { id: 2, role: 'FOLLOWER', term: 3, status: 'partitioned' },
        ],
        currentTerm: 3,
      });
      
      setEvents([
        { timestamp: '01.2s', message: 'Node 0 became LEADER (term 3)' },
        { timestamp: '01.5s', message: 'Node 2 network partition detected' },
      ]);
    }
  }, []);

  const handleStartSimulation = async (params) => {
    try {
      // TODO: Replace with actual API call
      // const response = await axios.post(`${process.env.REACT_APP_API_URL}/raft/start`, params);
      setIsRunning(true);
    } catch (error) {
      console.error('Error starting simulation:', error);
    }
  };

  return (
    <div className="app-container dark-mode">
      <header className="app-header">
        <h1>RAFT Distributed Systems Simulator</h1>
      </header>
      
      <div className="main-content">
        <div className="visualization-section">
          <ClusterCanvas nodes={simulationState?.nodes || []} />
          <StatusBar 
            leader={simulationState?.nodes.find(n => n.role === 'LEADER')?.id} 
            currentTerm={simulationState?.currentTerm} 
          />
        </div>
        
        <div className="control-section">
          <ControlPanel 
            isRunning={isRunning}
            onStart={handleStartSimulation}
          />
          <LogViewer events={events} />
        </div>
      </div>
    </div>
  );
};

export default App;

# ==== FILE: frontend/src/components/ClusterCanvas.js ====
import React from 'react';
import Node from './Node';
import './ClusterCanvas.css';

const ClusterCanvas = ({ nodes }) => {
  const calculatePosition = (index, total) => {
    const angle = (index / total) * Math.PI * 2;
    const radius = 150;
    return {
      x: Math.cos(angle) * radius + 200,
      y: Math.sin(angle) * radius + 200,
    };
  };

  return (
    <div className="cluster-canvas">
      <svg width="400" height="400" viewBox="0 0 400 400">
        {nodes.map((node, index) => {
          const position = calculatePosition(index, nodes.length);
          return (
            <Node
              key={node.id}
              id={node.id}
              role={node.role}
              term={node.term}
              status={node.status}
              x={position.x}
              y={position.y}
            />
          );
        })}
      </svg>
    </div>
  );
};

export default ClusterCanvas;

# ==== FILE: frontend/src/components/Node.js ====
import React from 'react';
import './Node.css';

const Node = ({ id, role, term, status, x, y }) => {
  const getNodeColor = () => {
    if (status === 'partitioned' || status === 'failed') return 'red';
    switch (role) {
      case 'LEADER': return 'gold';
      case 'CANDIDATE': return 'orange';
      default: return 'blue';
    }
  };

  return (
    <g className={`node ${status}`} transform={`translate(${x}, ${y})`}>
      <circle 
        cx="0" 
        cy="0" 
        r="30" 
        fill={getNodeColor()} 
        stroke={role === 'LEADER' ? 'gold' : 'black'}
        strokeWidth={role === 'LEADER' ? '3' : '1'}
      />
      <text x="0" y="5" textAnchor="middle" fill="white" fontSize="12">
        {id}
      </text>
      <text x="0" y="25" textAnchor="middle" fill="white" fontSize="10">
        T{term}
      </text>
      {role === 'LEADER' && (
        <text x="0" y="-35" textAnchor="middle" fill="gold" fontSize="12">
          ðŸ‘‘
        </text>
      )}
    </g>
  );
};

export default Node;

# ==== FILE: frontend/src/components/LogViewer.js ====
import React from 'react';
import './LogViewer.css';

const LogViewer = ({ events }) => {
  return (
    <div className="log-viewer">
      <h3>Event Timeline</h3>
      <div className="log-container">
        {events.length > 0 ? (
          <ul>
            {events.map((event, index) => (
              <li key={index} className="log-entry">
                <span className="timestamp">[{event.timestamp}]</span>
                <span className="message">{event.message}</span>
              </li>
            ))}
          </ul>
        ) : (
          <p>No events yet. Start the simulation to see activity.</p>
        )}
      </div>
    </div>
  );
};

export default LogViewer;

# ==== FILE: frontend/src/components/ControlPanel.js ====
import React, { useState } from 'react';
import './ControlPanel.css';

const ControlPanel = ({ isRunning, onStart }) => {
  const [nodes, setNodes] = useState(3);
  const [dropRate, setDropRate] = useState(0);

  const handleSubmit = (e) => {
    e.preventDefault();
    onStart({ nodes, dropRate });
  };

  return (
    <div className="control-panel">
      <h3>Simulation Controls</h3>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Number of Nodes:</label>
          <input 
            type="number" 
            min="3" 
            max="7" 
            value={nodes} 
            onChange={(e) => setNodes(parseInt(e.target.value))} 
          />
        </div>
        
        <div className="form-group">
          <label>Message Drop Rate (%):</label>
          <input 
            type="range" 
            min="0" 
            max="100" 
            value={dropRate} 
            onChange={(e) => setDropRate(parseInt(e.target.value))} 
          />
          <span>{dropRate}%</span>
        </div>
        
        <div className="button-group">
          <button type="submit" disabled={isRunning}>
            {isRunning ? 'Running...' : 'Start Simulation'}
          </button>
          <button type="button" disabled={!isRunning}>
            Stop
          </button>
          <button type="button">
            Reset
          </button>
        </div>
      </form>
      
      <div className="chaos-controls">
        <h4>Chaos Injection</h4>
        <div className="chaos-buttons">
          <button type="button">Kill Random Node</button>
          <button type="button">Partition Network</button>
          <button type="button">Restore All Nodes</button>
        </div>
      </div>
    </div>
  );
};

export default ControlPanel;

# ==== FILE: frontend/src/components/StatusBar.js ====
import React from 'react';
import './StatusBar.css';

const StatusBar = ({ leader, currentTerm }) => {
  return (
    <div className="status-bar">
      <div className="status-item">
        <span className="label">Current Term:</span>
        <span className="value">{currentTerm || 'N/A'}</span>
      </div>
      <div className="status-item">
        <span className="label">Leader:</span>
        <span className="value">{leader !== undefined ? `Node ${leader}` : 'None'}</span>
      </div>
      <div className="status-item">
        <span className="label">Status:</span>
        <span className="value">Stable</span>
      </div>
    </div>
  );
};

export default StatusBar;

# ==== FILE: frontend/src/App.css ====
.dark-mode {
  background-color: #1a1a1a;
  color: #f0f0f0;
}

.app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  padding: 20px;
}

.app-header {
  text-align: center;
  margin-bottom: 30px;
}

.main-content {
  display: flex;
  flex: 1;
  gap: 20px;
}

.visualization-section {
  flex: 2;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.control-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.cluster-canvas {
  border: 1px solid #333;
  border-radius: 8px;
  padding: 20px;
  background-color: #222;
}

.log-viewer {
  border: 1px solid #333;
  border-radius: 8px;
  padding: 15px;
  background-color: #222;
  height: 300px;
  overflow-y: auto;
}

.log-container {
  margin-top: 10px;
}

.log-entry {
  margin-bottom: 8px;
  font-family: monospace;
  font-size: 14px;
}

.timestamp {
  color: #4fc3f7;
  margin-right: 10px;
}

.control-panel {
  border: 1px solid #333;
  border-radius: 8px;
  padding: 15px;
  background-color: #222;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
}

.button-group {
  display: flex;
  gap: 10px;
  margin: 20px 0;
}

.chaos-controls {
  margin-top: 20px;
}

.chaos-buttons {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.status-bar {
  display: flex;
  justify-content: space-around;
  padding: 10px;
  background-color: #222;
  border-radius: 8px;
  border: 1px solid #333;
}

.status-item {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.label {
  font-size: 12px;
  color: #aaa;
}

.value {
  font-weight: bold;
  font-size: 16px;
}

Would you like me to add any additional components or enhance any particular aspect of the dashboard? I can add more sophisticated visualization features, real-time WebSocket integration, or additional educational elements about RAFT mechanics.