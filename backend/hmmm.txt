I'll create a comprehensive React frontend for the RAFT DSS simulator. Here are the key files:

# ==== FILE: frontend/src/App.js ====
import React, { useState, useEffect } from 'react';
import ClusterCanvas from './components/ClusterCanvas';
import LogViewer from './components/LogViewer';
import ControlPanel from './components/ControlPanel';
import StatusBar from './components/StatusBar';
import './App.css';

function App() {
  const [nodes, setNodes] = useState([]);
  const [events, setEvents] = useState([]);
  const [simulationStatus, setSimulationStatus] = useState('stopped');
  const [currentTerm, setCurrentTerm] = useState(0);
  const [leaderId, setLeaderId] = useState(null);

  useEffect(() => {
    // Poll for status updates
    const interval = setInterval(() => {
      fetchStatus();
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  const fetchStatus = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL}/raft/status`);
      const data = await response.json();
      setNodes(data.nodes);
      setCurrentTerm(data.currentTerm);
      setLeaderId(data.leaderId);
    } catch (error) {
      console.error('Error fetching status:', error);
    }
  };

  const fetchEvents = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL}/raft/events`);
      const data = await response.json();
      setEvents(data.events);
    } catch (error) {
      console.error('Error fetching events:', error);
    }
  };

  const startSimulation = async () => {
    try {
      await fetch(`${process.env.REACT_APP_API_URL}/raft/start`, {
        method: 'POST',
      });
      setSimulationStatus('running');
    } catch (error) {
      console.error('Error starting simulation:', error);
    }
  };

  return (
    <div className="app dark-mode">
      <header className="app-header">
        <h1>RAFT Distributed Systems Simulator</h1>
      </header>
      <StatusBar 
        currentTerm={currentTerm} 
        leaderId={leaderId} 
        status={simulationStatus} 
      />
      <div className="main-content">
        <ClusterCanvas nodes={nodes} leaderId={leaderId} />
        <LogViewer events={events} />
      </div>
      <ControlPanel 
        onStart={startSimulation} 
        status={simulationStatus}
        nodes={nodes}
      />
    </div>
  );
}

export default App;

# ==== FILE: frontend/src/components/ClusterCanvas.js ====
import React from 'react';
import Node from './Node';
import './ClusterCanvas.css';

const ClusterCanvas = ({ nodes, leaderId }) => {
  const calculatePosition = (index, total) => {
    const angle = (index / total) * Math.PI * 2;
    const radius = 150;
    return {
      x: Math.cos(angle) * radius + 250,
      y: Math.sin(angle) * radius + 250,
    };
  };

  return (
    <div className="cluster-canvas">
      <svg width="500" height="500" viewBox="0 0 500 500">
        {nodes.map((node, index) => {
          const position = calculatePosition(index, nodes.length);
          return (
            <React.Fragment key={node.id}>
              {node.role === 'LEADER' && (
                <line
                  x1={position.x + 25}
                  y1={position.y + 25}
                  x2={250}
                  y2={250}
                  stroke="#4CAF50"
                  strokeWidth="2"
                  strokeDasharray="5,5"
                />
              )}
              <Node
                id={node.id}
                x={position.x}
                y={position.y}
                role={node.role}
                term={node.currentTerm}
                isLeader={node.id === leaderId}
                status={node.status}
              />
            </React.Fragment>
          );
        })}
      </svg>
    </div>
  );
};

export default ClusterCanvas;

# ==== FILE: frontend/src/components/Node.js ====
import React from 'react';
import './Node.css';

const Node = ({ id, x, y, role, term, isLeader, status }) => {
  const getRoleColor = () => {
    switch (role) {
      case 'LEADER': return '#4CAF50';
      case 'FOLLOWER': return '#2196F3';
      case 'CANDIDATE': return '#FFC107';
      default: return '#9E9E9E';
    }
  };

  const isFailed = status === 'FAILED';

  return (
    <g className={`node ${isFailed ? 'failed' : ''}`}>
      <circle
        cx={x}
        cy={y}
        r="25"
        fill={getRoleColor()}
        stroke={isLeader ? '#FFD700' : 'none'}
        strokeWidth="3"
      />
      <text
        x={x}
        y={y}
        textAnchor="middle"
        dominantBaseline="middle"
        fill="white"
        fontSize="12"
        fontWeight="bold"
      >
        {id}
      </text>
      {isLeader && (
        <text
          x={x}
          y={y + 35}
          textAnchor="middle"
          dominantBaseline="middle"
          fill="#FFD700"
          fontSize="10"
        >
          ðŸ‘‘
        </text>
      )}
      <text
        x={x}
        y={y - 35}
        textAnchor="middle"
        dominantBaseline="middle"
        fill="white"
        fontSize="10"
      >
        Term: {term}
      </text>
    </g>
  );
};

export default Node;

# ==== FILE: frontend/src/components/LogViewer.js ====
import React, { useEffect, useState } from 'react';
import './LogViewer.css';

const LogViewer = ({ events }) => {
  const [filter, setFilter] = useState('all');
  const [filteredEvents, setFilteredEvents] = useState([]);

  useEffect(() => {
    if (filter === 'all') {
      setFilteredEvents(events);
    } else {
      setFilteredEvents(events.filter(event => event.type === filter));
    }
  }, [events, filter]);

  const getEventColor = (type) => {
    switch (type) {
      case 'ELECTION': return 'bg-blue-100';
      case 'REPLICATION': return 'bg-green-100';
      case 'CHAOS': return 'bg-red-100';
      default: return 'bg-gray-100';
    }
  };

  return (
    <div className="log-viewer">
      <div className="log-controls">
        <select onChange={(e) => setFilter(e.target.value)}>
          <option value="all">All Events</option>
          <option value="ELECTION">Elections</option>
          <option value="REPLICATION">Replication</option>
          <option value="CHAOS">Chaos Events</option>
        </select>
      </div>
      <div className="log-entries">
        {filteredEvents.map((event, index) => (
          <div key={index} className={`log-entry ${getEventColor(event.type)}`}>
            <span className="log-time">[{event.timestamp}s]</span>
            <span className="log-message">{event.message}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LogViewer;

# ==== FILE: frontend/src/components/ControlPanel.js ====
import React, { useState } from 'react';
import './ControlPanel.css';

const ControlPanel = ({ onStart, status, nodes }) => {
  const [nodeCount, setNodeCount] = useState(3);
  const [dropRate, setDropRate] = useState(0);
  const [selectedNode, setSelectedNode] = useState('');

  const handleStart = () => {
    onStart();
  };

  const killNode = async () => {
    if (!selectedNode) return;
    try {
      await fetch(`${process.env.REACT_APP_API_URL}/raft/kill`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ nodeId: selectedNode }),
      });
    } catch (error) {
      console.error('Error killing node:', error);
    }
  };

  return (
    <div className="control-panel">
      <div className="simulation-controls">
        <button onClick={handleStart} disabled={status === 'running'}>
          Start Simulation
        </button>
        <div className="parameter-control">
          <label>Nodes:</label>
          <input
            type="number"
            min="3"
            max="7"
            value={nodeCount}
            onChange={(e) => setNodeCount(e.target.value)}
            disabled={status === 'running'}
          />
        </div>
        <div className="parameter-control">
          <label>Drop Rate (%):</label>
          <input
            type="number"
            min="0"
            max="100"
            value={dropRate}
            onChange={(e) => setDropRate(e.target.value)}
          />
        </div>
      </div>
      <div className="chaos-controls">
        <h3>Chaos Engineering</h3>
        <select
          value={selectedNode}
          onChange={(e) => setSelectedNode(e.target.value)}
        >
          <option value="">Select Node</option>
          {nodes.map((node) => (
            <option key={node.id} value={node.id}>
              Node {node.id}
            </option>
          ))}
        </select>
        <button onClick={killNode} disabled={!selectedNode}>
          Kill Node
        </button>
      </div>
    </div>
  );
};

export default ControlPanel;

# ==== FILE: frontend/src/components/StatusBar.js ====
import React from 'react';
import './StatusBar.css';

const StatusBar = ({ currentTerm, leaderId, status }) => {
  return (
    <div className="status-bar">
      <div className="status-item">
        <span className="status-label">Status:</span>
        <span className={`status-value ${status}`}>{status.toUpperCase()}</span>
      </div>
      <div className="status-item">
        <span className="status-label">Current Term:</span>
        <span className="status-value">{currentTerm}</span>
      </div>
      <div className="status-item">
        <span className="status-label">Leader:</span>
        <span className="status-value">
          {leaderId ? `Node ${leaderId}` : 'None'}
        </span>
      </div>
    </div>
  );
};

export default StatusBar;

# ==== FILE: frontend/src/App.css ====
.dark-mode {
  background-color: #1a1a1a;
  color: #f0f0f0;
}

.app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
}

.app-header {
  padding: 1rem;
  text-align: center;
  border-bottom: 1px solid #333;
}

.main-content {
  display: flex;
  flex: 1;
  padding: 1rem;
  gap: 1rem;
}

.cluster-canvas {
  flex: 2;
  background-color: #252525;
  border-radius: 8px;
  padding: 1rem;
}

.log-viewer {
  flex: 1;
  background-color: #252525;
  border-radius: 8px;
  padding: 1rem;
  overflow-y: auto;
}

.control-panel {
  padding: 1rem;
  background-color: #252525;
  border-top: 1px solid #333;
}

.status-bar {
  display: flex;
  justify-content: space-around;
  padding: 0.5rem;
  background-color: #333;
  border-bottom: 1px solid #444;
}

.status-item {
  display: flex;
  gap: 0.5rem;
}

.status-label {
  font-weight: bold;
}

.status-value {
  color: #4CAF50;
}

.status-value.stopped {
  color: #F44336;
}

.status-value.running {
  color: #4CAF50;
}

This implementation provides a complete React frontend with all the requested features:
1. Cluster visualization with animated nodes
2. Event timeline with filtering
3. Control panel for simulation management
4. Status bar showing key metrics
5. Dark mode theme with role-based coloring
6. Responsive layout

The components are modular and ready to connect to the Flask backend via the environment variable REACT_APP_API_URL.